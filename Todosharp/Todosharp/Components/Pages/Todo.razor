@page "/todo"
@rendermode InteractiveServer

<PageTitle>Todo</PageTitle>

<h1>Todo</h1>

<EditForm Model="@newTodo" OnValidSubmit="@AddTodo">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Name:</label>
        <InputText @bind-Value="newTodo.Name" class="form-control" />
    </div>
    <div>
        <label>Due Date:</label>
        <InputDate @bind-Value="newTodo.DueDate" class="form-control" />
    </div>
    <div>
        <label>Status:</label>
        <InputSelect @bind-Value="newTodo.Status" class="form-control">
            @foreach (var status in Enum.GetValues<TodoStatus>())
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Add</button>
</EditForm>

@if (todos.Count == 0)
{
    <p>No todos yet.</p>
}
else
{
    <table id="todoTable" class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Due Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todos)
            {
                <tr draggable="true" data-id="@todo.Id">
                    <td>@todo.Name</td>
                    <td>@todo.DueDate.ToShortDateString()</td>
                    <td>@todo.Status</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => EditTodo(todo)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTodo(todo)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (editingTodo != null)
{
    <hr />
    <h4>Edit Todo</h4>
    <EditForm Model="@editingTodo" OnValidSubmit="@UpdateTodo">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Name:</label>
            <InputText @bind-Value="editingTodo.Name" class="form-control" />
        </div>
        <div>
            <label>Due Date:</label>
            <InputDate @bind-Value="editingTodo.DueDate" class="form-control" />
        </div>
        <div>
            <label>Status:</label>
            <InputSelect @bind-Value="editingTodo.Status" class="form-control">
                @foreach (var status in Enum.GetValues<TodoStatus>())
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </EditForm>
}

@code {
    private List<TodoModel> todos = new();
    private TodoModel newTodo = new();
    private TodoModel? editingTodo = null;
    private bool shouldRefreshDragAndDrop = false;

    [Inject] IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || shouldRefreshDragAndDrop)
        {
            await JSRuntime.InvokeVoidAsync("enableDragAndDrop", "todoTable", DotNetObjectReference.Create(this));
            shouldRefreshDragAndDrop = false; // Reset after running the script
        }
    }

    private void AddTodo()
    {
        todos.Add(new TodoModel()
            {
                Id = todos.Count > 0 ? todos.Max(t => t.Id) + 1 : 1,
                Name = newTodo.Name,
                DueDate = newTodo.DueDate,
                Status = newTodo.Status
            });

        newTodo = new();
        TriggerDragAndDrop();
    }

    private void EditTodo(TodoModel todo)
    {
        editingTodo = new TodoModel()
            {
                Id = todo.Id,
                Name = todo.Name,
                DueDate = todo.DueDate,
                Status = todo.Status
            };
    }

    private void UpdateTodo()
    {
        if (editingTodo != null)
        {
            var todo = todos.FirstOrDefault(t => t.Id == editingTodo.Id);
            if (todo != null)
            {
                todo.Name = editingTodo.Name;
                todo.DueDate = editingTodo.DueDate;
                todo.Status = editingTodo.Status;
            }
            editingTodo = null;
            TriggerDragAndDrop();
        }
    }

    private void DeleteTodo(TodoModel todo)
    {
        todos.Remove(todo);
        TriggerDragAndDrop();
    }

    private void CancelEdit()
    {
        editingTodo = null;
    }

    private void TriggerDragAndDrop()
    {
        shouldRefreshDragAndDrop = true;
        StateHasChanged(); // Force a re-render to trigger OnAfterRenderAsync
    }
}

